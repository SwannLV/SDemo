{"ts":1350671867497,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1350671875063,"patch":[[{"diffs":[[1,"'use strict';\n\nwindow.Physijs = (function() {\n    var THREE_REVISION = parseInt( THREE.REVISION, 10 ),\n\t\t_matrix = new THREE.Matrix4, _is_simulating = false,\n\t\t_Physijs = Physijs, // used for noConflict method\n\t\tPhysijs = {}, // object assigned to window.Physijs\n\t\tEventable, // class to provide simple event methods\n\t\tgetObjectId, // returns a unique ID for a Physijs mesh object\n\t\tgetEulerXYZFromQuaternion, getQuatertionFromEuler,\n\t\tconvertWorldPositionToObject, // Converts a world-space position to object-space\n\t\taddObjectChildren,\n\t\t\n\t\t_temp1, _temp2,\n\t\t_temp_vector3_1 = new THREE.Vector3,\n\t\t_temp_vector3_2 = new THREE.Vector3,\n\t\t_temp_matrix4_1 = new THREE.Matrix4,\n\t\t_quaternion_1 = new THREE.Quaternion,\n\t\t\n\t\t// constants\n\t\tMESSAGE_TYPES = {\n\t\t\tWORLDREPORT: 0,\n\t\t\tCOLLISIONREPORT: 1\n\t\t},\n\t\tREPORT_ITEMSIZE = 14;\n\t\n\tPhysijs.scripts = {};\n\t\n\tEventable = function() {\n\t\tthis._eventListeners = {};\n\t};\n\tEventable.prototype.addEventListener = function( event_name, callback ) {\n\t\tif ( !this._eventListeners.hasOwnProperty( event_name ) ) {\n\t\t\tthis._eventListeners[event_name] = [];\n\t\t}\n\t\tthis._eventListeners[event_name].push( callback );\n\t};\n\tEventable.prototype.removeEventListener = function( event_name, callback ) {\n\t\tvar index;\n\t\t\n\t\tif ( !this._eventListeners.hasOwnProperty( event_name ) ) return false;\n\t\t\n\t\tif ( (index = this._eventListeners[event_name].indexOf( callback )) >= 0 ) {\n\t\t\tthis._eventListeners[event_name].splice( index, 1 );\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t};\n\tEventable.prototype.dispatchEvent = function( event_name ) {\n\t\tvar i,\n\t\t\tparameters = Array.prototype.splice.call( arguments, 1 );\n\t\t\n\t\tif ( this._eventListeners.hasOwnProperty( event_name ) ) {\n\t\t\tfor ( i = 0; i < this._eventListeners[event_name].length; i++ ) {\n\t\t\t\tthis._eventListeners[event_name][i].apply( this, parameters );\n\t\t\t}\n\t\t}\n\t};\n\tEventable.make = function( obj ) {\n\t\tobj.prototype.addEventListener = Eventable.prototype.addEventListener;\n\t\tobj.prototype.removeEventListener = Eventable.prototype.removeEventListener;\n\t\tobj.prototype.dispatchEvent = Eventable.prototype.dispatchEvent;\n\t};\n\t\n\tgetObjectId = (function() {\n\t\tvar _id = 0;\n\t\treturn function() {\n\t\t\treturn _id++;\n\t\t};\n\t})();\n\t\n\tgetEulerXYZFromQuaternion = function ( x, y, z, w ) {\n\t\treturn new THREE.Vector3(\n\t\t\tMath.atan2( 2 * ( x * w - y * z ), ( w * w - x * x - y * y + z * z ) ),\n\t\t\tMath.asin( 2 *  ( x * z + y * w ) ),\n\t\t\tMath.atan2( 2 * ( z * w - x * y ), ( w * w + x * x - y * y - z * z ) )\n\t\t);\n\t};\n\t\n\tgetQuatertionFromEuler = function( x, y, z ) {\n\t\tvar c1, s1, c2, s2, c3, s3, c1c2, s1s2;\n\t\tc1 = Math.cos( y  ),\n\t\ts1 = Math.sin( y  ),\n\t\tc2 = Math.cos( -z ),\n\t\ts2 = Math.sin( -z ),\n\t\tc3 = Math.cos( x  ),\n\t\ts3 = Math.sin( x  ),\n\t\t\n\t\tc1c2 = c1 * c2,\n\t\ts1s2 = s1 * s2;\n\t\t\n\t\treturn {\n\t\t\tw: c1c2 * c3  - s1s2 * s3,\n\t\t  \tx: c1c2 * s3  + s1s2 * c3,\n\t\t\ty: s1 * c2 * c3 + c1 * s2 * s3,\n\t\t\tz: c1 * s2 * c3 - s1 * c2 * s3\n\t\t};\n\t};\n\t\n\tconvertWorldPositionToObject = function( position, object ) {\n\t\t_temp_matrix4_1.identity(); // reset temp matrix\n\t\t\n\t\t// Set the temp matrix's rotation to the object's rotation\n\t\tif ( object.useQuaternion ) {\n\t\t\t_temp_matrix4_1.identity().setRotationFromQuaternion( object.quaternion );\n\t\t} else {\n\t\t\t_temp_matrix4_1.identity().setRotationFromEuler( object.rotation );\n\t\t}\n\t\t\n\t\t// Invert rotation matrix in order to \"unrotate\" a point back to object space\n\t\t_temp_matrix4_1.getInverse( _temp_matrix4_1 ); \n\t\t\n\t\t// Yay! Temp vars!\n\t\t_temp_vector3_1.copy( position );\n\t\t_temp_vector3_2.copy( object.position );\n\t\t\n\t\t// Apply the rotation\n\t\treturn _temp_matrix4_1.multiplyVector3( _temp_vector3_1.subSelf( _temp_vector3_2 ) );\n\t};\n\t\n\t\n\t\n\t// Physijs.noConflict\n\tPhysijs.noConflict = function() {\n\t\twindow.Physijs = _Physijs;\n\t\treturn Physijs;\n\t};\n\t\n\t\n\t// Physijs.createMaterial\n\tPhysijs.createMaterial = function( material, friction, restitution ) {\n\t\tvar physijs_material = function(){};\n\t\tphysijs_material.prototype = material;\n\t\tphysijs_material = new physijs_material;\n\t\t\n\t\tphysijs_material._physijs = {\n\t\t\tid: material.id,\n\t\t\tfriction: friction === undefined ? .8 : friction,\n\t\t\trestitution: restitution === undefined ? .2 : restitution\n\t\t};\n\t\t\n\t\treturn physijs_material;\n\t};\n\t\n\t\n\t// Constraints\n\tPhysijs.PointConstraint = function( objecta, objectb, position ) {\n\t\tif ( position === undefined ) {\n\t\t\tposition = objectb;\n\t\t\tobjectb = undefined;\n\t\t}\n\t\t\n\t\tthis.type = 'point';\n\t\tthis.id = getObjectId();\n\t\tthis.objecta = objecta._physijs.id;\n\t\tthis.positiona = convertWorldPositionToObject( position, objecta ).clone();\n\t\t\n\t\tif ( objectb ) {\n\t\t\tthis.objectb = objectb._physijs.id;\n\t\t\tthis.positionb = convertWorldPositionToObject( position, objectb ).clone();\n\t\t}\n\t};\n\tPhysijs.PointConstraint.prototype.getDefinition = function() {\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t\tobjecta: this.objecta,\n\t\t\tobjectb: this.objectb,\n\t\t\tpositiona: this.positiona,\n\t\t\tpositionb: this.positionb\n\t\t};\n\t};\n\t\n\tPhysijs.HingeConstraint = function( objecta, objectb, position, axis ) {\n\t\tif ( axis === undefined ) {\n\t\t\taxis = position;\n\t\t\tposition = objectb;\n\t\t\tobjectb = undefined;\n\t\t}\n\t\t\n\t\tthis.type = 'hinge';\n\t\tthis.id = getObjectId();\n\t\tthis.scene = objecta.parent;\n\t\tthis.objecta = objecta._physijs.id;\n\t\tthis.positiona = convertWorldPositionToObject( position, objecta ).clone();\n\t\tthis.axis = axis;\n\t\t\n\t\tif ( objectb ) {\n\t\t\tthis.objectb = objectb._physijs.id;\n\t\t\tthis.positionb = convertWorldPositionToObject( position, objectb ).clone();\n\t\t}\n\t};\n\tPhysijs.HingeConstraint.prototype.getDefinition = function() {\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t\tobjecta: this.objecta,\n\t\t\tobjectb: this.objectb,\n\t\t\tpositiona: this.positiona,\n\t\t\tpositionb: this.positionb,\n\t\t\taxis: this.axis\n\t\t};\n\t};\n\t/*\n\t * low = minimum angle in radians\n\t * high = maximum angle in radians\n\t * bias_factor = applied as a factor to constraint error\n\t * relaxation_factor = controls bounce (0.0 == no bounce)\n\t */\n\tPhysijs.HingeConstraint.prototype.setLimits = function( low, high, bias_factor, relaxation_factor ) {\n\t\tthis.scene.execute( 'hinge_setLimits', { constraint: this.id, low: low, high: high, bias_factor: bias_factor, relaxation_factor: relaxation_factor } );\n\t};\n\tPhysijs.HingeConstraint.prototype.enableAngularMotor = function( velocity, acceleration ) {\n\t\tthis.scene.execute( 'hinge_enableAngularMotor', { constraint: this.id, velocity: velocity, acceleration: acceleration } );\n\t};\n\tPhysijs.HingeConstraint.prototype.disableMotor = function( velocity, acceleration ) {\n\t\tthis.scene.execute( 'hinge_disableMotor', { constraint: this.id } );\n\t};\n\t\n\tPhysijs.SliderConstraint = function( objecta, objectb, position, axis ) {\n\t\tif ( axis === undefined ) {\n\t\t\taxis = position;\n\t\t\tposition = objectb;\n\t\t\tobjectb = undefined;\n\t\t}\n\t\t\n\t\tthis.type = 'slider';\n\t\tthis.id = getObjectId();\n\t\tthis.scene = objecta.parent;\n\t\tthis.objecta = objecta._physijs.id;\n\t\tthis.positiona = convertWorldPositionToObject( position, objecta ).clone();\n\t\tthis.axis = axis;\n\t\t\n\t\tif ( objectb ) {\n\t\t\tthis.objectb = objectb._physijs.id;\n\t\t\tthis.positionb = convertWorldPositionToObject( position, objectb ).clone();\n\t\t}\n\t};\n\tPhysijs.SliderConstraint.prototype.getDefinition = function() {\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t\tobjecta: this.objecta,\n\t\t\tobjectb: this.objectb,\n\t\t\tpositiona: this.positiona,\n\t\t\tpositionb: this.positionb,\n\t\t\taxis: this.axis\n\t\t};\n\t};\n\tPhysijs.SliderConstraint.prototype.setLimits = function( lin_lower, lin_upper, ang_lower, ang_upper ) {\n\t\tthis.scene.execute( 'slider_setLimits', { constraint: this.id, lin_lower: lin_lower, lin_upper: lin_upper, ang_lower: ang_lower, ang_upper: ang_upper } );\n\t};\n\tPhysijs.SliderConstraint.prototype.setRestitution = function( linear, angular ) {\n\t\tthis.scene.execute(\n\t\t\t'slider_setRestitution',\n\t\t\t{\n\t\t\t\tconstraint: this.id,\n\t\t\t\tlinear: linear,\n\t\t\t\tangular: angular\n\t\t\t}\n\t\t);\n\t};\n\tPhysijs.SliderConstraint.prototype.enableLinearMotor = function( velocity, acceleration) {\n\t\tthis.scene.execute( 'slider_enableLinearMotor', { constraint: this.id, velocity: velocity, acceleration: acceleration } );\n\t};\n\tPhysijs.SliderConstraint.prototype.disableLinearMotor = function() {\n\t\tthis.scene.execute( 'slider_disableLinearMotor', { constraint: this.id } );\n\t};\n\tPhysijs.SliderConstraint.prototype.enableAngularMotor = function( velocity, acceleration ) {\n\t\tthis.scene.execute( 'slider_enableAngularMotor', { constraint: this.id, velocity: velocity, acceleration: acceleration } );\n\t};\n\tPhysijs.SliderConstraint.prototype.disableAngularMotor = function() {\n\t\tthis.scene.execute( 'slider_disableAngularMotor', { constraint: this.id } );\n\t};\n\t\n\tPhysijs.ConeTwistConstraint = function( objecta, objectb, position ) {\n\t\tif ( position === undefined ) {\n\t\t\tthrow 'Both objects must be defined in a ConeTwistConstraint.';\n\t\t}\n\t\tthis.type = 'conetwist';\n\t\tthis.id = getObjectId();\n\t\tthis.scene = objecta.parent;\n\t\tthis.objecta = objecta._physijs.id;\n\t\tthis.positiona = convertWorldPositionToObject( position, objecta ).clone();\n\t\tthis.objectb = objectb._physijs.id;\n\t\tthis.positionb = convertWorldPositionToObject( position, objectb ).clone();\n\t\tthis.axisa = { x: objecta.rotation.x, y: objecta.rotation.y, z: objecta.rotation.z };\n\t\tthis.axisb = { x: objectb.rotation.x, y: objectb.rotation.y, z: objectb.rotation.z };\n\t};\n\tPhysijs.ConeTwistConstraint.prototype.getDefinition = function() {\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t\tobjecta: this.objecta,\n\t\t\tobjectb: this.objectb,\n\t\t\tpositiona: this.positiona,\n\t\t\tpositionb: this.positionb,\n\t\t\taxisa: this.axisa,\n\t\t\taxisb: this.axisb\n\t\t};\n\t};\n\tPhysijs.ConeTwistConstraint.prototype.setLimit = function( x, y, z ) {\n\t\tthis.scene.execute( 'conetwist_setLimit', { constraint: this.id, x: x, y: y, z: z } );\n\t};\n\tPhysijs.ConeTwistConstraint.prototype.enableMotor = function() {\n\t\tthis.scene.execute( 'conetwist_enableMotor', { constraint: this.id } );\n\t};\n\tPhysijs.ConeTwistConstraint.prototype.setMaxMotorImpulse = function( max_impulse ) {\n\t\tthis.scene.execute( 'conetwist_setMaxMotorImpulse', { constraint: this.id, max_impulse: max_impulse } );\n\t};\n\tPhysijs.ConeTwistConstraint.prototype.setMotorTarget = function( target ) {\n\t\tif ( target instanceof THREE.Vector3 ) {\n\t\t\tthrow 'Wait for Three.js r50 to setMotorTarget from Vector3 - use Matrix4 or Quaternion instead';\n\t\t\ttarget = new THREE.Quaternion().setFromEuler( target );\n\t\t} else if ( target instanceof THREE.Matrix4 ) {\n\t\t\ttarget = new THREE.Quaternion().setFromRotationMatrix( target );\n\t\t}\n\t\tthis.scene.execute( 'conetwist_setMotorTarget', { constraint: this.id, x: target.x, y: target.y, z: target.z, w: target.w } );\n\t};\n\tPhysijs.ConeTwistConstraint.prototype.disableMotor = function() {\n\t\tthis.scene.execute( 'conetwist_disableMotor', { constraint: this.id } );\n\t};\n\t\n\tPhysijs.DOFConstraint = function( objecta, objectb, position ) {\n\t\tif ( position === undefined ) {\n\t\t\tposition = objectb;\n\t\t\tobjectb = undefined;\n\t\t}\n\t\tthis.type = 'dof';\n\t\tthis.id = getObjectId();\n\t\tthis.scene = objecta.parent;\n\t\tthis.objecta = objecta._physijs.id;\n\t\tthis.positiona = convertWorldPositionToObject( position, objecta ).clone();\n\t\tthis.axisa = { x: objecta.rotation.x, y: objecta.rotation.y, z: objecta.rotation.z };\n\t\t\n\t\tif ( objectb ) {\n\t\t\tthis.objectb = objectb._physijs.id;\n\t\t\tthis.positionb = convertWorldPositionToObject( position, objectb ).clone();\n\t\t\tthis.axisb = { x: objectb.rotation.x, y: objectb.rotation.y, z: objectb.rotation.z };\n\t\t}\n\t};\n\tPhysijs.DOFConstraint.prototype.getDefinition = function() {\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t\tobjecta: this.objecta,\n\t\t\tobjectb: this.objectb,\n\t\t\tpositiona: this.positiona,\n\t\t\tpositionb: this.positionb,\n\t\t\taxisa: this.axisa,\n\t\t\taxisb: this.axisb\n\t\t};\n\t};\n\tPhysijs.DOFConstraint.prototype.setLinearLowerLimit = function( limit ) {\n\t\tthis.scene.execute( 'dof_setLinearLowerLimit', { constraint: this.id, x: limit.x, y: limit.y, z: limit.z } );\n\t}\n\tPhysijs.DOFConstraint.prototype.setLinearUpperLimit = function( limit ) {\n\t\tthis.scene.execute( 'dof_setLinearUpperLimit', { constraint: this.id, x: limit.x, y: limit.y, z: limit.z } );\n\t}\n\tPhysijs.DOFConstraint.prototype.setAngularLowerLimit = function( limit ) {\n\t\tthis.scene.execute( 'dof_setAngularLowerLimit', { constraint: this.id, x: limit.x, y: limit.y, z: limit.z } );\n\t}\n\tPhysijs.DOFConstraint.prototype.setAngularUpperLimit = function( limit ) {\n\t\tthis.scene.execute( 'dof_setAngularUpperLimit', { constraint: this.id, x: limit.x, y: limit.y, z: limit.z } );\n\t}\n\tPhysijs.DOFConstraint.prototype.enableAngularMotor = function( which ) {\n\t\tthis.scene.execute( 'dof_enableAngularMotor', { constraint: this.id, which: which } );\n\t};\n\tPhysijs.DOFConstraint.prototype.configureAngularMotor = function( which, low_angle, high_angle, velocity, max_force ) {\n\t\tthis.scene.execute( 'dof_configureAngularMotor', { constraint: this.id, which: which, low_angle: low_angle, high_angle: high_angle, velocity: velocity, max_force: max_force } );\n\t};\n\tPhysijs.DOFConstraint.prototype.disableAngularMotor = function( which ) {\n\t\tthis.scene.execute( 'dof_disableAngularMotor', { constraint: this.id, which: which } );\n\t};\n\t\n\t// Physijs.Scene\n\tPhysijs.Scene = function( params ) {\n\t\tvar self = this;\n\t\t\n\t\tEventable.call( this );\n\t\tTHREE.Scene.call( this );\n\t\t\n\t\tthis._worker = new Worker( Physijs.scripts.worker || 'physijs_worker.js' );\n\t\tthis._materials = {};\n\t\tthis._objects = {};\n\t\t\n\t\tthis._worker.onmessage = function ( event ) {\n\t\t\tvar _temp;\n\t\t\t\n\t\t\tif ( event.data instanceof Float32Array ) {\n\t\t\t\t\n\t\t\t\t// transferable object\n\t\t\t\tswitch ( event.data[0] ) {\n\t\t\t\t\tcase MESSAGE_TYPES.WORLDREPORT:\n\t\t\t\t\t\tself._updateScene( event.data );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\tcase MESSAGE_TYPES.COLLISIONREPORT:\n\t\t\t\t\t\tself._updateCollisions( event.data );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\t// non-transferable object\n\t\t\t\tswitch ( event.data.cmd ) {\n\t\t\t\t\tcase 'objectReady':\n\t\t\t\t\t\t_temp = event.data.params;\n\t\t\t\t\t\tself._objects[ _temp ].dispatchEvent( 'ready' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'worldReady':\n\t\t\t\t\t\tself.dispatchEvent( 'ready' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// Do nothing, just show the message\n\t\t\t\t\t\tconsole.debug('Received: ' + event.data.cmd);\n\t\t\t\t\t\tconsole.dir(event.data.params);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\tparams = params || {};\n\t\tparams.ammo = Physijs.scripts.ammo || 'ammo.js';\n\t\tthis.execute( 'init', params );\n\t};\n\tPhysijs.Scene.prototype = new THREE.Scene;\n\tPhysijs.Scene.prototype.constructor = Physijs.Scene;\n\tEventable.make( Physijs.Scene );\n\t\n\tPhysijs.Scene.prototype._updateScene = function( data ) {\n\t\tvar num_objects = data[1],\n\t\t\tobject,\n\t\t\ti, offset;\n\t\t\t\n\t\tfor ( i = 0; i < num_objects; i++ ) {\n\t\t\t\n\t\t\toffset = 2 + i * REPORT_ITEMSIZE;\n\t\t\tobject = this._objects[ data[ offset ] ];\n\t\t\t\n\t\t\tif ( object.__dirtyPosition === false ) {\n\t\t\t\tobject.position.set(\n\t\t\t\t\tdata[ offset + 1 ],\n\t\t\t\t\tdata[ offset + 2 ],\n\t\t\t\t\tdata[ offset + 3 ]\n\t\t\t\t);\n\t\t\t}\n\t\t\t\n\t\t\tif ( object.__dirtyRotation === false ) {\n\t\t\t\tif ( object.useQuaternion ) {\n\t\t\t\t\tobject.quaternion.set(\n\t\t\t\t\t\tdata[ offset + 4 ],\n\t\t\t\t\t\tdata[ offset + 5 ],\n\t\t\t\t\t\tdata[ offset + 6 ],\n\t\t\t\t\t\tdata[ offset + 7 ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tobject.rotation = getEulerXYZFromQuaternion(\n\t\t\t\t\t\tdata[ offset + 4 ],\n\t\t\t\t\t\tdata[ offset + 5 ],\n\t\t\t\t\t\tdata[ offset + 6 ],\n\t\t\t\t\t\tdata[ offset + 7 ]\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t\t\n\t\t\tobject._physijs.linearVelocity.set(\n\t\t\t\tdata[ offset + 8 ],\n\t\t\t\tdata[ offset + 9 ],\n\t\t\t\tdata[ offset + 10 ]\n\t\t\t);\n\t\t\t\n\t\t\tobject._physijs.angularVelocity.set(\n\t\t\t\tdata[ offset + 11 ],\n\t\t\t\tdata[ offset + 12 ],\n\t\t\t\tdata[ offset + 13 ]\n\t\t\t);\n\t\t\t\n\t\t}\n\t\t\n\t\tif ( this._worker.webkitPostMessage ) {\n\t\t\t// Give the typed array back to the worker\n\t\t\tthis._worker.webkitPostMessage( data, [data.buffer] );\n\t\t}\n\t\t\n\t\t_is_simulating = false;\n\t\tthis.dispatchEvent( 'update' );\n\t};\n\t\n\tPhysijs.Scene.prototype._updateCollisions = function( data ) {\n\t\t/**\n\t\t * #TODO\n\t\t * This is probably the worst way ever to handle collisions. The inherent evilness is a residual\n\t\t * effect from the previous version's evilness which mutated when switching to transferable objects.\n\t\t *\n\t\t * If you feel inclined to make this better, please do so.\n\t\t */\n\t\t \n\t\tvar i, j, offset, object, object2,\n\t\t\tcollisions = {}, collided_with = [];\n\t\t\n\t\t// Build collision manifest\n\t\tfor ( i = 0; i < data[1]; i++ ) {\n\t\t\toffset = 2 + i * 2;\n\t\t\tobject = data[ offset ];\n\t\t\tobject2 = data[ offset + 1 ];\n\t\t\t\n\t\t\tif ( !collisions[ object ] ) collisions[ object ] = [];\n\t\t\tcollisions[ object ].push( object2 );\n\t\t}\n\t\t\n\t\t// Deal with collisions\n\t\tfor ( object in this._objects ) {\n\t\t\tif ( !this._objects.hasOwnProperty( object ) ) return;\n\t\t\tobject = this._objects[ object ];\n\t\t\t\n\t\t\tif ( collisions[ object._physijs.id ] ) {\n\t\t\t\t\n\t\t\t\t// this object is touching others\n\t\t\t\tcollided_with.length = 0;\n\t\t\t\t\n\t\t\t\tfor ( j = 0; j < collisions[ object._physijs.id ].length; j++ ) {\n\t\t\t\t\tobject2 = this._objects[ collisions[ object._physijs.id ][j] ];\n\t\t\t\t\t\n\t\t\t\t\tif ( object._physijs.touches.indexOf( object2._physijs.id ) === -1 ) {\n\t\t\t\t\t\tobject._physijs.touches.push( object2._physijs.id );\n\t\t\t\t\t\t\n\t\t\t\t\t\t_temp_vector3_1.sub( object.getLinearVelocity(), object2.getLinearVelocity() );\n\t\t\t\t\t\t_temp1 = _temp_vector3_1.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\t_temp_vector3_1.sub( object.getAngularVelocity(), object2.getAngularVelocity() );\n\t\t\t\t\t\t_temp2 = _temp_vector3_1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tobject.dispatchEvent( 'collision', object2, _temp1, _temp2 );\n\t\t\t\t\t\tobject2.dispatchEvent( 'collision', object, _temp1, _temp2 );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcollided_with.push( object2._physijs.id );\n\t\t\t\t}\n\t\t\t\tfor ( j = 0; j < object._physijs.touches.length; j++ ) {\n\t\t\t\t\tif ( collided_with.indexOf( object._physijs.touches[j] ) === -1 ) {\n\t\t\t\t\t\tobject._physijs.touches.splice( j--, 1 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\t// not touching other objects\n\t\t\t\tobject._physijs.touches.length = 0;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\tif ( this._worker.webkitPostMessage ) {\n\t\t\t// Give the typed array back to the worker\n\t\t\tthis._worker.webkitPostMessage( data, [data.buffer] );\n\t\t}\n\t};\n\t\n\tPhysijs.Scene.prototype.addConstraint = function ( constraint, show_marker ) {\n\t\tthis.execute( 'addConstraint', constraint.getDefinition() );\n\t\t\n\t\tif ( show_marker ) {\n\t\t\tvar marker;\n\t\t\t\n\t\t\tswitch ( constraint.type ) {\n\t\t\t\tcase 'point':\n\t\t\t\t\tmarker = new THREE.Mesh(\n\t\t\t\t\t\tnew THREE.SphereGeometry( 1.5 ),\n\t\t\t\t\t\tnew THREE.MeshNormalMaterial\n\t\t\t\t\t);\n\t\t\t\t\tmarker.position.copy( constraint.positiona );\n\t\t\t\t\tthis._objects[ constraint.objecta ].add( marker );\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'hinge':\n\t\t\t\t\tmarker = new THREE.Mesh(\n\t\t\t\t\t\tnew THREE.SphereGeometry( 1.5 ),\n\t\t\t\t\t\tnew THREE.MeshNormalMaterial\n\t\t\t\t\t);\n\t\t\t\t\tmarker.position.copy( constraint.positiona );\n\t\t\t\t\tthis._objects[ constraint.objecta ].add( marker );\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'slider':\n\t\t\t\t\tmarker = new THREE.Mesh(\n\t\t\t\t\t\tnew THREE.CubeGeometry( 10, 1, 1 ),\n\t\t\t\t\t\tnew THREE.MeshNormalMaterial\n\t\t\t\t\t);\n\t\t\t\t\tmarker.position.copy( constraint.positiona );\n\t\t\t\t\t// This rotation isn't right if all three axis are non-0 values\n\t\t\t\t\t// TODO: change marker's rotation order to ZYX\n\t\t\t\t\tmarker.rotation.set(\n\t\t\t\t\t\tconstraint.axis.y, // yes, y and\n\t\t\t\t\t\tconstraint.axis.x, // x axis are swapped\n\t\t\t\t\t\tconstraint.axis.z\n\t\t\t\t\t);\n\t\t\t\t\tthis._objects[ constraint.objecta ].add( marker );\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'conetwist':\n\t\t\t\t\tmarker = new THREE.Mesh(\n\t\t\t\t\t\tnew THREE.SphereGeometry( 1.5 ),\n\t\t\t\t\t\tnew THREE.MeshNormalMaterial\n\t\t\t\t\t);\n\t\t\t\t\tmarker.position.copy( constraint.positiona );\n\t\t\t\t\tthis._objects[ constraint.objecta ].add( marker );\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'dof':\n\t\t\t\t\tmarker = new THREE.Mesh(\n\t\t\t\t\t\tnew THREE.SphereGeometry( 1.5 ),\n\t\t\t\t\t\tnew THREE.MeshNormalMaterial\n\t\t\t\t\t);\n\t\t\t\t\tmarker.position.copy( constraint.positiona );\n\t\t\t\t\tthis._objects[ constraint.objecta ].add( marker );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn constraint;\n\t};\n\t\n\tPhysijs.Scene.prototype.execute = function( cmd, params ) {\n\t\tthis._worker.postMessage({ cmd: cmd, params: params });\n\t};\n\t\n\taddObjectChildren = function( parent, object ) {\n\t\tvar i;\n\t\t\n\t\tfor ( i = 0; i < object.children.length; i++ ) {\n\t\t\tif ( object.children[i]._physijs ) {\n\t\t\t\tobject.children[i].updateMatrix();\n\t\t\t\tobject.children[i].updateMatrixWorld();\n\t\t\t\t\n\t\t\t\t_temp_vector3_1.getPositionFromMatrix( object.children[i].matrixWorld );\n\t\t\t\t_quaternion_1.setFromRotationMatrix( object.children[i].matrixWorld );\n\t\t\t\t\n\t\t\t\tobject.children[i]._physijs.position_offset = {\n\t\t\t\t\tx: _temp_vector3_1.x,\n\t\t\t\t\ty: _temp_vector3_1.y,\n\t\t\t\t\tz: _temp_vector3_1.z\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tobject.children[i]._physijs.rotation = {\n\t\t\t\t\tx: _quaternion_1.x,\n\t\t\t\t\ty: _quaternion_1.y,\n\t\t\t\t\tz: _quaternion_1.z,\n\t\t\t\t\tw: _quaternion_1.w\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tparent._physijs.children.push( object.children[i]._physijs );\n\t\t\t}\n\t\t\t\n\t\t\taddObjectChildren( parent, object.children[i] );\n\t\t}\n\t};\n\t\n\tPhysijs.Scene.prototype.add = function( object ) {\n\t\tTHREE.Mesh.prototype.add.call( this, object );\n\t\t\n\t\tif ( object._physijs ) {\n\t\t\tobject.__dirtyPosition = false;\n\t\t\tobject.__dirtyRotation = false;\n\t\t\tthis._objects[object._physijs.id] = object;\n\t\t\t\n\t\t\tif ( object.children.length ) {\n\t\t\t\tobject._physijs.children = [];\n\t\t\t\taddObjectChildren( object, object );\n\t\t\t}\n\t\t\t\n\t\t\tobject.world = this;\n\t\t\t\n\t\t\tif ( object.material._physijs ) {\n\t\t\t\tif ( !this._materials.hasOwnProperty( object.material._physijs.id ) ) {\n\t\t\t\t\tthis.execute( 'registerMaterial', object.material._physijs );\n\t\t\t\t\tobject._physijs.materialId = object.material._physijs.id;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Object starting position + rotation\t\t\n\t\t\tobject._physijs.position = { x: object.position.x, y: object.position.y, z: object.position.z };\t\n\t\t\tif (!object.useQuaternion) {\n\t\t\t\t_matrix.identity().setRotationFromEuler( object.rotation );\n\t\t\t\tobject.quaternion.setFromRotationMatrix( _matrix );\n\t\t\t};\n\t\t\tobject._physijs.rotation = { x: object.quaternion.x, y: object.quaternion.y, z: object.quaternion.z, w: object.quaternion.w };\n\t\t\t\n\t\t\tthis.execute( 'addObject', object._physijs );\n\t\t}\n\t};\n\t\n\tPhysijs.Scene.prototype.remove = function( object ) {\n\t\tTHREE.Mesh.prototype.remove.call( this, object );\n\t\t\n\t\tif ( object._physijs ) {\n\t\t\tthis.execute( 'removeObject', { id: object._physijs.id } );\n\t\t}\n\t};\n\t\n\tPhysijs.Scene.prototype.setGravity = function( gravity ) {\n\t\tif ( gravity ) {\n\t\t\tthis.execute( 'setGravity', gravity );\n\t\t}\n\t};\n\t\n\tPhysijs.Scene.prototype.simulate = function( timeStep, maxSubSteps ) {\n\t\tvar object_id, object, update;\n\t\t\n\t\tif ( _is_simulating ) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t_is_simulating = true;\n\t\t\n\t\tfor ( object_id in this._objects ) {\n\t\t\tif ( !this._objects.hasOwnProperty( object_id ) ) continue;\n\t\t\t\n\t\t\tobject = this._objects[object_id];\n\t\t\t\n\t\t\tif ( object.__dirtyPosition || object.__dirtyRotation ) {\n\t\t\t\tupdate = { id: object._physijs.id };\n\t\t\t\t\n\t\t\t\tif ( object.__dirtyPosition ) {\n\t\t\t\t\tupdate.pos = { x: object.position.x, y: object.position.y, z: object.position.z };\n\t\t\t\t\tobject.__dirtyPosition = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( object.__dirtyRotation ) {\n\t\t\t\t\tif (!object.useQuaternion) {\n\t\t\t\t\t\t_matrix.identity().setRotationFromEuler( object.rotation );\n\t\t\t\t\t\tobject.quaternion.setFromRotationMatrix( _matrix );\n\t\t\t\t\t};\n\t\t\t\t\tupdate.quat = { x: object.quaternion.x, y: object.quaternion.y, z: object.quaternion.z, w: object.quaternion.w };\n\t\t\t\t\tobject.__dirtyRotation = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.execute( 'updateTransform', update );\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.execute( 'simulate', { timeStep: timeStep, maxSubSteps: maxSubSteps } );\n\t\t\n\t\treturn true;\n\t};\n\t\n\t\n\t// Phsijs.Mesh\n\tPhysijs.Mesh = function ( geometry, material, mass ) {\n\t\tvar index;\n\t\t\n\t\tif ( !geometry ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tEventable.call( this );\n\t\tTHREE.Mesh.call( this, geometry, material );\n\t\t\n\t\tif ( !geometry.boundingBox ) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\t\t\n\t\tthis._physijs = {\n\t\t\ttype: null,\n\t\t\tid: getObjectId(),\n\t\t\tmass: mass || 0,\n\t\t\ttouches: [],\n\t\t\tlinearVelocity: new THREE.Vector3,\n\t\t\tangularVelocity: new THREE.Vector3\n\t\t};\n\t};\n\tPhysijs.Mesh.prototype = new THREE.Mesh;\n\tPhysijs.Mesh.prototype.constructor = Physijs.Mesh;\n\tEventable.make( Physijs.Mesh );\n\t\n\t// Physijs.Mesh.mass\n\tPhysijs.Mesh.prototype.__defineGetter__('mass', function() {\n\t\treturn this._physijs.mass;\n\t});\n\tPhysijs.Mesh.prototype.__defineSetter__('mass', function( mass ) {\n\t\tthis._physijs.mass = mass;\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'updateMass', { id: this._physijs.id, mass: mass } );\n\t\t}\n\t});\n\t\n\t// Physijs.Mesh.applyCentralImpulse\n\tPhysijs.Mesh.prototype.applyCentralImpulse = function ( force ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'applyCentralImpulse', { id: this._physijs.id, x: force.x, y: force.y, z: force.z } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.applyImpulse\n\tPhysijs.Mesh.prototype.applyImpulse = function ( force, offset ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'applyImpulse', { id: this._physijs.id, impulse_x: force.x, impulse_y: force.y, impulse_z: force.z, x: offset.x, y: offset.y, z: offset.z } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.applyCentralForce\n\tPhysijs.Mesh.prototype.applyCentralForce = function ( force ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'applyCentralForce', { id: this._physijs.id, x: force.x, y: force.y, z: force.z } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.applyForce\n\tPhysijs.Mesh.prototype.applyForce = function ( force, offset ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'applyForce', { id: this._physijs.id, force_x: force.x, force_y : force.y, force_z : force.z, x: offset.x, y: offset.y, z: offset.z } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.getAngularVelocity\n\tPhysijs.Mesh.prototype.getAngularVelocity = function () {\n\t\treturn this._physijs.angularVelocity;\n\t};\n\t\n\t// Physijs.Mesh.setAngularVelocity\n\tPhysijs.Mesh.prototype.setAngularVelocity = function ( velocity ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'setAngularVelocity', { id: this._physijs.id, x: velocity.x, y: velocity.y, z: velocity.z } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.getLinearVelocity\n\tPhysijs.Mesh.prototype.getLinearVelocity = function () {\n\t\treturn this._physijs.linearVelocity;\n\t};\n\t\n\t// Physijs.Mesh.setLinearVelocity\n\tPhysijs.Mesh.prototype.setLinearVelocity = function ( velocity ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'setLinearVelocity', { id: this._physijs.id, x: velocity.x, y: velocity.y, z: velocity.z } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.setAngularFactor\n\tPhysijs.Mesh.prototype.setAngularFactor = function ( factor ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'setAngularFactor', { id: this._physijs.id, x: factor.x, y: factor.y, z: factor.z } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.setLinearFactor\n\tPhysijs.Mesh.prototype.setLinearFactor = function ( factor ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'setLinearFactor', { id: this._physijs.id, x: factor.x, y: factor.y, z: factor.z } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.setDamping\n\tPhysijs.Mesh.prototype.setDamping = function ( linear, angular ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'setDamping', { id: this._physijs.id, linear: linear, angular: angular } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.setCcdMotionThreshold\n\tPhysijs.Mesh.prototype.setCcdMotionThreshold = function ( threshold ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'setCcdMotionThreshold', { id: this._physijs.id, threshold: threshold } );\n\t\t}\n\t};\n\t\n\t// Physijs.Mesh.setCcdSweptSphereRadius\n\tPhysijs.Mesh.prototype.setCcdSweptSphereRadius = function ( radius ) {\n\t\tif ( this.world ) {\n\t\t\tthis.world.execute( 'setCcdSweptSphereRadius', { id: this._physijs.id, radius: radius } );\n\t\t}\n\t};\n\t\n\t\n\t// Physijs.PlaneMesh\n\tPhysijs.PlaneMesh = function ( geometry, material, mass ) {\n\t\tvar width, height;\n\t\t\n\t\tPhysijs.Mesh.call( this, geometry, material, mass );\n\t\t\n\t\tif ( !geometry.boundingBox ) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\t\t\n\t\twidth = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n\t\theight = geometry.boundingBox.max.y - geometry.boundingBox.min.y;\n\t\t\n\t\tthis._physijs.type = 'plane';\n\t\tthis._physijs.normal = geometry.faces[0].normal.clone();\n\t\tthis._physijs.mass = (typeof mass === 'undefined') ? width * height : mass;\n\t};\n\tPhysijs.PlaneMesh.prototype = new Physijs.Mesh;\n\tPhysijs.PlaneMesh.prototype.constructor = Physijs.PlaneMesh;\n\n\t// Physijs.HeightfieldMesh\n\tPhysijs.HeightfieldMesh = function ( geometry, material, mass, xdiv, zdiv) {\n\n\t\tvar points = [];\n\t\t\n\t\tPhysijs.Mesh.call( this, geometry, material, mass );\n\n\t\tfor ( var i = 0; i < geometry.vertices.length; i++ ) {\n\n\t\t\tpoints[i] = geometry.vertices[i].y;\n\t\t}\n\t\t\n\t\tthis._physijs.type   = 'heightfield';\n\t\tthis._physijs.points = points;\n\t\tthis._physijs.xsize  = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n\t\tthis._physijs.zsize  = geometry.boundingBox.max.z - geometry.boundingBox.min.z;\n\t\t// note - this assumes our plane geometry is square, unless we pass in specific xdiv and zdiv\n\t\tthis._physijs.xpts = (typeof xdiv === 'undefined') ? Math.sqrt(geometry.vertices.length) : xdiv + 1;\n\t\tthis._physijs.zpts = (typeof zdiv === 'undefined') ? Math.sqrt(geometry.vertices.length) : zdiv + 1;\n\t\tthis._physijs.absMaxHeight = Math.max(geometry.boundingBox.max.y,Math.abs(geometry.boundingBox.min.y));\n\t};\n\tPhysijs.HeightfieldMesh.prototype = new Physijs.Mesh;\n\tPhysijs.HeightfieldMesh.prototype.constructor = Physijs.HeightfieldMesh;\t\n\t\n\t// Physijs.BoxMesh\n\tPhysijs.BoxMesh = function( geometry, material, mass ) {\n\t\tvar width, height, depth;\n\t\t\n\t\tPhysijs.Mesh.call( this, geometry, material, mass );\n\t\t\n\t\tif ( !geometry.boundingBox ) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\t\t\n\t\twidth = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n\t\theight = geometry.boundingBox.max.y - geometry.boundingBox.min.y;\n\t\tdepth = geometry.boundingBox.max.z - geometry.boundingBox.min.z;\n\t\t\n\t\tthis._physijs.type = 'box';\n\t\tthis._physijs.width = width;\n\t\tthis._physijs.height = height;\n\t\tthis._physijs.depth = depth;\n\t\tthis._physijs.mass = (typeof mass === 'undefined') ? width * height * depth : mass;\n\t};\n\tPhysijs.BoxMesh.prototype = new Physijs.Mesh;\n\tPhysijs.BoxMesh.prototype.constructor = Physijs.BoxMesh;\n\t\n\t\n\t// Physijs.SphereMesh\n\tPhysijs.SphereMesh = function( geometry, material, mass ) {\n\t\tPhysijs.Mesh.call( this, geometry, material, mass );\n\t\t\n\t\tif ( !geometry.boundingSphere ) {\n\t\t\tgeometry.computeBoundingSphere();\n\t\t}\n\t\t\n\t\tthis._physijs.type = 'sphere';\n\t\tthis._physijs.radius = geometry.boundingSphere.radius;\n\t\tthis._physijs.mass = (typeof mass === 'undefined') ? (4/3) * Math.PI * Math.pow(this._physijs.radius, 3) : mass;\n\t};\n\tPhysijs.SphereMesh.prototype = new Physijs.Mesh;\n\tPhysijs.SphereMesh.prototype.constructor = Physijs.SphereMesh;\n\t\n\t\n\t// Physijs.CylinderMesh\n\tPhysijs.CylinderMesh = function( geometry, material, mass ) {\n\t\tvar width, height, depth;\n\t\t\n\t\tPhysijs.Mesh.call( this, geometry, material, mass );\n\t\t\n\t\tif ( !geometry.boundingBox ) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\t\t\n\t\twidth = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n\t\theight = geometry.boundingBox.max.y - geometry.boundingBox.min.y;\n\t\tdepth = geometry.boundingBox.max.z - geometry.boundingBox.min.z;\n\t\t\n\t\tthis._physijs.type = 'cylinder';\n\t\tthis._physijs.width = width;\n\t\tthis._physijs.height = height;\n\t\tthis._physijs.depth = depth;\n\t\tthis._physijs.mass = (typeof mass === 'undefined') ? width * height * depth : mass;\n\t};\n\tPhysijs.CylinderMesh.prototype = new Physijs.Mesh;\n\tPhysijs.CylinderMesh.prototype.constructor = Physijs.CylinderMesh;\n\t\n\t\n\t// Physijs.ConeMesh\n\tPhysijs.ConeMesh = function( geometry, material, mass ) {\n\t\tvar width, height, depth;\n\t\t\n\t\tPhysijs.Mesh.call( this, geometry, material, mass );\n\t\t\n\t\tif ( !geometry.boundingBox ) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\t\t\n\t\twidth = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n\t\theight = geometry.boundingBox.max.y - geometry.boundingBox.min.y;\n\t\t\n\t\tthis._physijs.type = 'cone';\n\t\tthis._physijs.radius = width / 2;\n\t\tthis._physijs.height = height;\n\t\tthis._physijs.mass = (typeof mass === 'undefined') ? width * height : mass;\n\t};\n\tPhysijs.ConeMesh.prototype = new Physijs.Mesh;\n\tPhysijs.ConeMesh.prototype.constructor = Physijs.ConeMesh;\n\t\n\t\n\t// Physijs.ConvexMesh\n\tPhysijs.ConvexMesh = function( geometry, material, mass ) {\n\t\tvar i,\n\t\t\twidth, height, depth,\n\t\t\tpoints = [];\n\t\t\n\t\tPhysijs.Mesh.call( this, geometry, material, mass );\n\t\t\n\t\tif ( !geometry.boundingBox ) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\t\t\n\t\tfor ( i = 0; i < geometry.vertices.length; i++ ) {\n\t\t\tif ( THREE_REVISION >= 49 ) {\n\t\t\t\tpoints.push({\n\t\t\t\t\tx: geometry.vertices[i].x,\n\t\t\t\t\ty: geometry.vertices[i].y,\n\t\t\t\t\tz: geometry.vertices[i].z\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tpoints.push({\n\t\t\t\t\tx: geometry.vertices[i].position.x,\n\t\t\t\t\ty: geometry.vertices[i].position.y,\n\t\t\t\t\tz: geometry.vertices[i].position.z\n\t\t\t\t});\n\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\twidth = geometry.boundingBox.max.x - geometry.boundingBox.min.x;\n\t\theight = geometry.boundingBox.max.y - geometry.boundingBox.min.y;\n\t\tdepth = geometry.boundingBox.max.z - geometry.boundingBox.min.z;\n\t\t\n\t\tthis._physijs.type = 'convex';\n\t\tthis._physijs.points = points;\n\t\tthis._physijs.mass = (typeof mass === 'undefined') ? width * height * depth : mass;\n\t};\n\tPhysijs.ConvexMesh.prototype = new Physijs.Mesh;\n\tPhysijs.ConvexMesh.prototype.constructor = Physijs.ConvexMesh;\n\t\n\t\n\treturn Physijs;\n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":32956}]],"length":32956,"saved":false}
