{"ts":1350672406050,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1350672419266,"patch":[[{"diffs":[[1,"'use strict';\n\nvar    \n\ttransferableMessage = self.webkitPostMessage || self.postMessage,\n\t\n\t// enum\n\tMESSAGE_TYPES = {\n\t\tWORLDREPORT: 0,\n\t\tCOLLISIONREPORT: 1\n\t},\n\t\n\t// temp variables\n\t_object,\n\t_vector,\n\t_transform,\n\t\n\t// functions\n\tpublic_functions = {},\n\tgetShapeFromCache,\n\tsetShapeCache,\n\tcreateShape,\n\treportWorld,\n\treportCollisions,\n\t\n\t// world variables\n\tfixedTimeStep, // used when calling stepSimulation\n\tlast_simulation_time, // store in *seconds*\n\tworld,\n\t\n\t// private cache\n\t_now,\n\t_objects = {},\n\t_constraints = {},\n\t_materials = {},\n\t_objects_ammo = {},\n\t_num_objects = 0,\n\t_object_shapes = {},\n\t\n\t// object reporting\n\tREPORT_CHUNKSIZE, // report array is increased in increments of this chunk size\n\t\n\tWORLDREPORT_ITEMSIZE = 14, // how many float values each reported item needs\n\tworldreport,\n\t\n\tCOLLISIONREPORT_ITEMSIZE = 2, // one float for each object id\n\tcollisionreport;\n\n\ngetShapeFromCache = function ( cache_key ) {\n\tif ( _object_shapes[ cache_key ] !== undefined ) {\n\t\treturn _object_shapes[ cache_key ];\n\t}\n\treturn null;\n};\n\nsetShapeCache = function ( cache_key, shape ) {\n\t_object_shapes[ cache_key ] = shape;\n}\n\ncreateShape = function( description ) {\n\tvar cache_key, shape;\n\t\n\t_transform.setIdentity();\n\t\n\tswitch ( description.type ) {\n\t\tcase 'plane':\n\t\t\tcache_key = 'plane_' + description.normal.x + '_' + description.normal.y + '_' + description.normal.z;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\tshape = new Ammo.btStaticPlaneShape( new Ammo.btVector3( description.normal.x, description.normal.y, description.normal.z ), 0 );\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'box':\n\t\t\tcache_key = 'box_' + description.width + '_' + description.height + '_' + description.depth;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\tshape = new Ammo.btBoxShape(new Ammo.btVector3( description.width / 2, description.height / 2, description.depth / 2 ));\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'sphere':\n\t\t\tcache_key = 'sphere_' + description.radius;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\tshape = new Ammo.btSphereShape( description.radius );\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'cylinder':\n\t\t\tcache_key = 'cylinder_' + description.width + '_' + description.height + '_' + description.depth;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\tshape = new Ammo.btCylinderShape(new Ammo.btVector3( description.width / 2, description.height / 2, description.depth / 2 ));\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'cone':\n\t\t\tcache_key = 'cone_' + description.radius + '_' + description.height;\n\t\t\tif ( ( shape = getShapeFromCache( cache_key ) ) === null ) {\n\t\t\t\tshape = new Ammo.btConeShape( description.radius, description.height );\n\t\t\t\tsetShapeCache( cache_key, shape );\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'triangle':\n\t\t\tvar i, triangle, triangle_mesh = new Ammo.btTriangleMesh;\n\t\t\tfor ( i = 0; i < description.triangles.length; i++ ) {\n\t\t\t\ttriangle = description.triangles[i];\n\t\t\t\ttriangle_mesh.addTriangle(\n\t\t\t\t\tnew Ammo.btVector3( triangle[0][0], triangle[0][1], triangle[0][2] ),\n\t\t\t\t\tnew Ammo.btVector3( triangle[1][0], triangle[1][1], triangle[1][2] ),\n\t\t\t\t\tnew Ammo.btVector3( triangle[2][0], triangle[2][1], triangle[2][2] ),\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t\tshape = new Ammo.btConvexTriangleMeshShape(\n\t\t\t\ttriangle_mesh,\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tbreak;\n\t\t\n\t\tcase 'convex':\n\t\t\tvar i, point, shape = new Ammo.btConvexHullShape;\n\t\t\tfor ( i = 0; i < description.points.length; i++ ) {\n\t\t\t\tpoint = description.points[i];\n\t\t\t\tshape.addPoint( new Ammo.btVector3( point.x, point.y, point.z ) );\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'heightfield':\n\n\t\t\tvar ptr = Ammo.allocate(description.xpts * description.zpts, \"float\", Ammo.ALLOC_NORMAL);\n\n\t\t\tfor (var f = 0; f < description.points.length; f++) {\n\t\t\t\t\n\t\t\t\tAmmo.setValue(ptr + f,  description.points[f]  , 'float');\n\t\t\t}\n\n\t\t\tshape = new Ammo.btHeightfieldTerrainShape(\n\t\t\t\t\tdescription.xpts,\n\t\t\t\t\tdescription.zpts,\n\t\t\t\t\tptr,\n\t\t\t\t\t1,\n\t\t\t\t\t-description.absMaxHeight,\n\t\t\t\t\tdescription.absMaxHeight,\n\t\t\t\t\t1,\n\t\t\t\t\t0,\n\t\t\t\t\tfalse);\n\n\t\t\tvar localScaling = new Ammo.btVector3(description.xsize/(description.xpts),1,description.zsize/(description.zpts));\n\t\t\tshape.setLocalScaling(localScaling);\n\t\t\tbreak;\n\t\t\n\t\tdefault:\n\t\t\t// Not recognized\n\t\t\treturn;\n\t\t\tbreak;\n\t}\n\t\n\treturn shape;\n};\n\npublic_functions.init = function( params ) {\n\timportScripts( params.ammo );\n\t_transform = new Ammo.btTransform;\n\t\n\tREPORT_CHUNKSIZE = params.reportsize || 50;\n\tworldreport = new Float32Array(2 + REPORT_CHUNKSIZE * WORLDREPORT_ITEMSIZE); // message id + # of objects to report + chunk size * # of values per object\n\tworldreport[0] = MESSAGE_TYPES.WORLDREPORT;\n\t\n\tcollisionreport = new Float32Array(2 + REPORT_CHUNKSIZE * COLLISIONREPORT_ITEMSIZE); // message id + # of collisions to report + chunk size * # of values per object\n\tcollisionreport[0] = MESSAGE_TYPES.COLLISIONREPORT;\n\t\n\tvar collisionConfiguration = new Ammo.btDefaultCollisionConfiguration,\n\t\tdispatcher = new Ammo.btCollisionDispatcher( collisionConfiguration ),\n\t\tsolver = new Ammo.btSequentialImpulseConstraintSolver,\n\t\tbroadphase;\n\t\n\tif ( !params.broadphase ) params.broadphase = { type: 'dynamic' };\n\tswitch ( params.broadphase.type ) {\n\t\tcase 'sweepprune':\n\t\t\tbroadphase = new Ammo.btAxisSweep3(\n\t\t\t\tnew Ammo.btVector3( params.broadphase.aabbmin.x, params.broadphase.aabbmin.y, params.broadphase.aabbmax.z ),\n\t\t\t\tnew Ammo.btVector3( params.broadphase.aabbmax.x, params.broadphase.aabbmax.y, params.broadphase.aabbmax.z )\n\t\t\t);\n\t\t\tbreak;\n\t\t\n\t\tcase 'dynamic':\n\t\tdefault:\n\t\t\tbroadphase = new Ammo.btDbvtBroadphase;\n\t\t\tbreak;\n\t}\n\t\n\tworld = new Ammo.btDiscreteDynamicsWorld( dispatcher, broadphase, solver, collisionConfiguration );\n\t\n\tfixedTimeStep = params.fixedTimeStep || 1 / 60;\n\n\ttransferableMessage({ cmd: 'worldReady' });\n};\n\npublic_functions.registerMaterial = function( description ) {\n\t_materials[ description.id ] = description;\n};\n\npublic_functions.setGravity = function( description ) {\n\tworld.setGravity(new Ammo.btVector3( description.x, description.y, description.z ));\n};\n\npublic_functions.addObject = function( description ) {\n\tvar i,\n\t\tlocalInertia, shape, motionState, rbInfo, body;\n\t\n\tshape = createShape( description );\n\t\n\t// If there are children then this is a compound shape\n\tif ( description.children ) {\n\t\tvar compound_shape = new Ammo.btCompoundShape, _child;\n\t\tcompound_shape.addChildShape( _transform, shape );\n\t\t\n\t\tfor ( i = 0; i < description.children.length; i++ ) {\n\t\t\t_child = description.children[i];\n\t\t\tvar trans = new Ammo.btTransform;\n\t\t\ttrans.setIdentity();\n\t\t\ttrans.setOrigin(new Ammo.btVector3( _child.position_offset.x, _child.position_offset.y, _child.position_offset.z ));\n\t\t\ttrans.setRotation(new Ammo.btQuaternion( _child.rotation.x, _child.rotation.y, _child.rotation.z, _child.rotation.w ));\n\t\t\t\n\t\t\tshape = createShape( description.children[i] );\n\t\t\tcompound_shape.addChildShape( trans, shape );\n\t\t}\n\t\t\n\t\tshape = compound_shape;\n\t}\n\t\n\tlocalInertia = new Ammo.btVector3(0, 0, 0); // #TODO: localIntertia is the local inertia tensor, what does it do and should it be a parameter?\n\tshape.calculateLocalInertia( description.mass, localInertia );\n\t\n\t_transform.setIdentity();\n\t_transform.setOrigin(new Ammo.btVector3( description.position.x, description.position.y, description.position.z ));\n\t_transform.setRotation(new Ammo.btQuaternion( description.rotation.x, description.rotation.y, description.rotation.z, description.rotation.w ));\n\t\n\tmotionState = new Ammo.btDefaultMotionState( _transform ); // #TODO: btDefaultMotionState supports center of mass offset as second argument - implement\n\trbInfo = new Ammo.btRigidBodyConstructionInfo( description.mass, motionState, shape, localInertia );\n\t\n\tif ( description.materialId !== undefined ) {\n\t\trbInfo.set_m_friction( _materials[ description.materialId ].friction );\n\t\trbInfo.set_m_restitution( _materials[ description.materialId ].restitution );\n\t}\n\t\n\tbody = new Ammo.btRigidBody( rbInfo );\n\t\n\tif ( typeof description.collision_flags !== 'undefined' ) {\n\t\tbody.setCollisionFlags( description.collision_flags );\n\t}\n\t\n\tworld.addRigidBody( body );\n\t\n\tbody.id = description.id;\n\t_objects[ body.id ] = body;\n\t_objects_ammo[body.a] = body.id;\n\t_num_objects++;\n\t\n\ttransferableMessage({ cmd: 'objectReady', params: body.id });\n};\n\npublic_functions.removeObject = function( details ) {\n\tworld.removeRigidBody( _objects[details.id] );\n\tdelete _objects[details.id];\n\t_num_objects--;\n};\n\npublic_functions.updateTransform = function( details ) {\n\t_object = _objects[details.id];\n\t_object.getMotionState().getWorldTransform( _transform );\n\t\n\tif ( details.pos ) {\n\t\t_transform.setOrigin(new Ammo.btVector3( details.pos.x, details.pos.y, details.pos.z ));\n\t}\n\t\n\tif ( details.quat ) {\n\t\t_transform.setRotation(new Ammo.btQuaternion( details.quat.x, details.quat.y, details.quat.z, details.quat.w ));\n\t}\n\t\n\t_object.setWorldTransform( _transform );\n\t_object.activate();\n};\n\npublic_functions.updateMass = function( details ) {\n\t// #TODO: changing a static object into dynamic is buggy\n\t_object = _objects[details.id];\n\t\n\t// Per http://www.bulletphysics.org/Bullet/phpBB3/viewtopic.php?p=&f=9&t=3663#p13816\n\tworld.removeRigidBody( _object );\n\t_object.setMassProps( details.mass, new Ammo.btVector3(0, 0, 0) );\n\tworld.addRigidBody( _object );\n\t_object.activate();\n};\n\npublic_functions.applyCentralImpulse = function ( details ) {\n\t_objects[details.id].applyCentralImpulse(new Ammo.btVector3( details.x, details.y, details.z ));\n\t_objects[details.id].activate();\n};\n\npublic_functions.applyImpulse = function ( details ) {\n\t_objects[details.id].applyImpulse(\n\t\tnew Ammo.btVector3( details.impulse_x, details.impulse_y, details.impulse_z ),\n\t\tnew Ammo.btVector3( details.x, details.y, details.z )\n\t);\n\t_objects[details.id].activate();\n};\n\npublic_functions.applyCentralForce = function ( details ) {\n\t_objects[details.id].applyCentralForce(new Ammo.btVector3( details.x, details.y, details.z ));\n\t_objects[details.id].activate();\n};\n\npublic_functions.applyForce = function ( details ) {\n\t_objects[details.id].applyForce(\n\t\t\tnew Ammo.btVector3( details.force_x, details.force_y, details.force_z ),\n\t\t\tnew Ammo.btVector3( details.x, details.y, details.z )\n\t);\t\n\t_objects[details.id].activate();\n};\n\npublic_functions.setAngularVelocity = function ( details ) {\n\t_objects[details.id].setAngularVelocity(\n\t\tnew Ammo.btVector3( details.x, details.y, details.z )\n\t);\n\t_objects[details.id].activate();\n};\n\npublic_functions.setLinearVelocity = function ( details ) {\n\t_objects[details.id].setLinearVelocity(\n\t\tnew Ammo.btVector3( details.x, details.y, details.z )\n\t);\n\t_objects[details.id].activate();\n};\n\npublic_functions.setAngularFactor = function ( details ) {\n\t_objects[details.id].setAngularFactor(\n\t\tnew Ammo.btVector3( details.x, details.y, details.z )\n\t);\n};\n\npublic_functions.setLinearFactor = function ( details ) {\n\t_objects[details.id].setLinearFactor(\n\t\tnew Ammo.btVector3( details.x, details.y, details.z )\n\t);\n};\n\npublic_functions.setDamping = function ( details ) {\n\t_objects[details.id].setDamping( details.linear, details.angular );\n};\n\npublic_functions.setCcdMotionThreshold = function ( details ) {\n\t_objects[details.id].setCcdMotionThreshold( details.threshold );\n};\n\npublic_functions.setCcdSweptSphereRadius = function ( details ) {\n\t_objects[details.id].setCcdSweptSphereRadius( details.radius );\n};\n\npublic_functions.addConstraint = function ( details ) {\n\tvar constraint;\n\t\n\tswitch ( details.type ) {\n\t\t\n\t\tcase 'point':\n\t\t\tif ( details.objectb === undefined ) {\n\t\t\t\tconstraint = new Ammo.btPoint2PointConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\tnew Ammo.btVector3( details.positiona.x, details.positiona.y, details.positiona.z )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconstraint = new Ammo.btPoint2PointConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_objects[ details.objectb ],\n\t\t\t\t\tnew Ammo.btVector3( details.positiona.x, details.positiona.y, details.positiona.z ),\n\t\t\t\t\tnew Ammo.btVector3( details.positionb.x, details.positionb.y, details.positionb.z )\n\t\t\t\t);\n\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'hinge':\n\t\t\tif ( details.objectb === undefined ) {\n\t\t\t\tconstraint = new Ammo.btHingeConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\tnew Ammo.btVector3( details.positiona.x, details.positiona.y, details.positiona.z ),\n\t\t\t\t\tnew Ammo.btVector3( details.axis.x, details.axis.y, details.axis.z )\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconstraint = new Ammo.btHingeConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_objects[ details.objectb ],\n\t\t\t\t\tnew Ammo.btVector3( details.positiona.x, details.positiona.y, details.positiona.z ),\n\t\t\t\t\tnew Ammo.btVector3( details.positionb.x, details.positionb.y, details.positionb.z ),\n\t\t\t\t\tnew Ammo.btVector3( details.axis.x, details.axis.y, details.axis.z ),\n\t\t\t\t\tnew Ammo.btVector3( details.axis.x, details.axis.y, details.axis.z )\n\t\t\t\t);\n\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'slider':\n\t\t\tvar transforma, transformb, rotation;\n\t\t\t\n\t\t\ttransforma = new Ammo.btTransform();\n\t\t\ttransforma.setOrigin(new Ammo.btVector3( details.positiona.x, details.positiona.y, details.positiona.z ));\n\t\t\t\n\t\t\tvar rotation = transforma.getRotation();\n\t\t\trotation.setEuler( details.axis.x, details.axis.y, details.axis.z );\n\t\t\ttransforma.setRotation( rotation );\n\t\t\t\n\t\t\tif ( details.objectb ) {\n\t\t\t\ttransformb = new Ammo.btTransform();\n\t\t\t\ttransformb.setOrigin(new Ammo.btVector3( details.positionb.x, details.positionb.y, details.positionb.z ));\n\t\t\t\t\n\t\t\t\trotation = transformb.getRotation();\n\t\t\t\trotation.setEuler( details.axis.x, details.axis.y, details.axis.z );\n\t\t\t\ttransformb.setRotation( rotation );\n\t\t\t\t\n\t\t\t\tconstraint = new Ammo.btSliderConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_objects[ details.objectb ],\n\t\t\t\t\ttransforma,\n\t\t\t\t\ttransformb,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconstraint = new Ammo.btSliderConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\ttransforma,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tcase 'conetwist':\n\t\t\tvar transforma, transformb;\n\t\t\t\n\t\t\ttransforma = new Ammo.btTransform();\n\t\t\ttransforma.setIdentity();\n\t\t\t\n\t\t\ttransformb = new Ammo.btTransform();\n\t\t\ttransformb.setIdentity();\n\t\t\t\n\t\t\ttransforma.setOrigin(new Ammo.btVector3( details.positiona.x, details.positiona.y, details.positiona.z ));\n\t\t\ttransformb.setOrigin(new Ammo.btVector3( details.positionb.x, details.positionb.y, details.positionb.z ));\n\t\t\t\n\t\t\tvar rotation = transforma.getRotation();\n\t\t\trotation.setEulerZYX( -details.axisa.z, -details.axisa.y, -details.axisa.x );\n\t\t\ttransforma.setRotation( rotation );\n\t\t\t\n\t\t\trotation = transformb.getRotation();\n\t\t\trotation.setEulerZYX( -details.axisb.z, -details.axisb.y, -details.axisb.x );\n\t\t\ttransformb.setRotation( rotation );\n\t\t\t\n\t\t\tconstraint = new Ammo.btConeTwistConstraint(\n\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t_objects[ details.objectb ],\n\t\t\t\ttransforma,\n\t\t\t\ttransformb\n\t\t\t);\n\t\t\t\n\t\t\tconstraint.setLimit( Math.PI, 0, Math.PI );\n\t\t\tbreak;\n\t\t\n\t\tcase 'dof':\n\t\t\tvar transforma, transformb, rotation;\n\t\t\n\t\t\ttransforma = new Ammo.btTransform();\n\t\t\ttransforma.setIdentity();\n\t\t\ttransforma.setOrigin(new Ammo.btVector3( details.positiona.x, details.positiona.y, details.positiona.z ));\n\t\t\t\n\t\t\trotation = transforma.getRotation();\n\t\t\trotation.setEulerZYX( -details.axisa.z, -details.axisa.y, -details.axisa.x );\n\t\t\ttransforma.setRotation( rotation );\n\t\t\t\n\t\t\tif ( details.objectb ) {\n\t\t\t\ttransformb = new Ammo.btTransform();\n\t\t\t\ttransformb.setIdentity();\n\t\t\t\ttransformb.setOrigin(new Ammo.btVector3( details.positionb.x, details.positionb.y, details.positionb.z ));\n\t\t\t\t\n\t\t\t\trotation = transformb.getRotation();\n\t\t\t\trotation.setEulerZYX( -details.axisb.z, -details.axisb.y, -details.axisb.x );\n\t\t\t\ttransformb.setRotation( rotation );\n\t\t\t\t\n\t\t\t\tconstraint = new Ammo.btGeneric6DofConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\t_objects[ details.objectb ],\n\t\t\t\t\ttransforma,\n\t\t\t\t\ttransformb\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconstraint = new Ammo.btGeneric6DofConstraint(\n\t\t\t\t\t_objects[ details.objecta ],\n\t\t\t\t\ttransforma\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\t\n\t\tdefault:\n\t\t\treturn;\n\t\t\n\t};\n\t\n\tworld.addConstraint( constraint );\n\t\n\t_constraints[ details.id ] = constraint;\n};\n\npublic_functions.simulate = function( params ) {\n\tif ( world ) {\n\t\tparams = params || {};\n\t\t_now = new Date().getTime() / 1000; // store in *seconds*\n\t\t\n\t\tif ( !params.timeStep ) {\n\t\t\tif ( last_simulation_time ) {\n\t\t\t\tparams.timeStep = _now - last_simulation_time; // time since last simulation\n\t\t\t} else {\n\t\t\t\tparams.timeStep = fixedTimeStep; // handle first frame\n\t\t\t}\n\t\t}\n\t\t\n\t\tparams.maxSubSteps = params.maxSubSteps || Math.ceil( params.timeStep / fixedTimeStep ); // If maxSubSteps is not defined, keep the simulation fully up to date\n\t\t\n\t\tworld.stepSimulation( params.timeStep, params.maxSubSteps, fixedTimeStep );\n\t\treportWorld();\n\t\treportCollisions();\n\t\t\n\t\tlast_simulation_time = _now;\n\t}\n};\n\n\n// Constraint functions\npublic_functions.hinge_setLimits = function( params ) {\n\t_constraints[ params.constraint ].setLimit( params.low, params.high, 0, params.bias_factor, params.relaxation_factor );\n};\npublic_functions.hinge_enableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.enableAngularMotor( true, params.velocity, params.acceleration );\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.hinge_disableMotor = function( params ) {\n\t_constraints[ params.constraint ].enableMotor( false );\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\n\npublic_functions.slider_setLimits = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setLowerLinLimit( params.lin_lower || 0 );\n\tconstraint.setUpperLinLimit( params.lin_upper || 0 );\n\t\n\tconstraint.setLowerAngLimit( params.ang_lower || 0 );\n\tconstraint.setUpperAngLimit( params.ang_upper || 0 );\n};\npublic_functions.slider_setRestitution = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setSoftnessLimLin( params.linear || 0 );\n\tconstraint.setSoftnessLimAng( params.angular || 0 );\n};\npublic_functions.slider_enableLinearMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setTargetLinMotorVelocity( params.velocity );\n\tconstraint.setMaxLinMotorForce( params.acceleration );\n\tconstraint.setPoweredLinMotor( true );\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.slider_disableLinearMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setPoweredLinMotor( false );\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.slider_enableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setTargetAngMotorVelocity( params.velocity );\n\tconstraint.setMaxAngMotorForce( params.acceleration );\n\tconstraint.setPoweredAngMotor( true );\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.slider_disableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setPoweredAngMotor( false );\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\n\npublic_functions.conetwist_setLimit = function( params ) {\n\t_constraints[ params.constraint ].setLimit( params.z, params.y, params.x ); // ZYX order\n};\npublic_functions.conetwist_enableMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.enableMotor( true );\n\tconstraint.getRigidBodyA().activate();\n\tconstraint.getRigidBodyB().activate();\n};\npublic_functions.conetwist_setMaxMotorImpulse = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setMaxMotorImpulse( params.max_impulse );\n\tconstraint.getRigidBodyA().activate();\n\tconstraint.getRigidBodyB().activate();\n};\npublic_functions.conetwist_setMotorTarget = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setMotorTarget(new Ammo.btQuaternion( params.x, params.y, params.z, params.w ));\n\tconstraint.getRigidBodyA().activate();\n\tconstraint.getRigidBodyB().activate();\n};\npublic_functions.conetwist_disableMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.enableMotor( false );\n\tconstraint.getRigidBodyA().activate();\n\tconstraint.getRigidBodyB().activate();\n};\n\npublic_functions.dof_setLinearLowerLimit = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setLinearLowerLimit(new Ammo.btVector3( params.x, params.y, params.z ));\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_setLinearUpperLimit = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setLinearUpperLimit(new Ammo.btVector3( params.x, params.y, params.z ));\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_setAngularLowerLimit = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setAngularLowerLimit(new Ammo.btVector3( params.x, params.y, params.z ));\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_setAngularUpperLimit = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\tconstraint.setAngularUpperLimit(new Ammo.btVector3( params.x, params.y, params.z ));\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_enableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\t\n\tvar motor = constraint.getRotationalLimitMotor( params.which );\n\tmotor.set_m_enableMotor( true );\n\t\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_configureAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\t\n\tvar motor = constraint.getRotationalLimitMotor( params.which );\n\t\n\tmotor.set_m_loLimit( params.low_angle );\n\tmotor.set_m_hiLimit( params.high_angle );\n\tmotor.set_m_targetVelocity( params.velocity );\n\tmotor.set_m_maxMotorForce( params.max_force );\n\t\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\npublic_functions.dof_disableAngularMotor = function( params ) {\n\tvar constraint = _constraints[ params.constraint ];\n\t\n\tvar motor = constraint.getRotationalLimitMotor( params.which );\n\tmotor.set_m_enableMotor( false );\n\t\n\tconstraint.getRigidBodyA().activate();\n\tif ( constraint.getRigidBodyB() ) {\n\t\tconstraint.getRigidBodyB().activate();\n\t}\n};\n\nreportWorld = function() {\n\tvar index, object,\n\t\ttransform = new Ammo.btTransform(), origin, rotation,\n\t\toffset = 0,\n\t\ti = 0;\n\t\n\tif ( worldreport.length < 2 + _num_objects * WORLDREPORT_ITEMSIZE ) {\n\t\tworldreport = new Float32Array(\n\t\t\t2 + // message id & # objects in report\n\t\t\t( Math.ceil( _num_objects / REPORT_CHUNKSIZE ) * REPORT_CHUNKSIZE ) * WORLDREPORT_ITEMSIZE // # of values needed * item size\n\t\t);\n\t\tworldreport[0] = MESSAGE_TYPES.WORLDREPORT;\n\t}\n\t\n\tworldreport[1] = _num_objects; // record how many objects we're reporting on\n\t\n\t//for ( i = 0; i < worldreport[1]; i++ ) {\n\tfor ( index in _objects ) {\n\t\tif ( _objects.hasOwnProperty( index ) ) {\n\t\t\tobject = _objects[index];\n\t\t\t\n\t\t\t// #TODO: we can't use center of mass transform when center of mass can change,\n\t\t\t//        but getMotionState().getWorldTransform() screws up on objects that have been moved\n\t\t\t//object.getMotionState().getWorldTransform( transform );\n\t\t\ttransform = object.getCenterOfMassTransform();\n\t\t\t\n\t\t\torigin = transform.getOrigin();\n\t\t\trotation = transform.getRotation();\n\t\t\t\n\t\t\t// add values to report\n\t\t\toffset = 2 + (i++) * WORLDREPORT_ITEMSIZE;\n\t\t\t\n\t\t\tworldreport[ offset ] = object.id;\n\t\t\t\n\t\t\tworldreport[ offset + 1 ] = origin.x();\n\t\t\tworldreport[ offset + 2 ] = origin.y();\n\t\t\tworldreport[ offset + 3 ] = origin.z();\n\t\t\t\n\t\t\tworldreport[ offset + 4 ] = rotation.x();\n\t\t\tworldreport[ offset + 5 ] = rotation.y();\n\t\t\tworldreport[ offset + 6 ] = rotation.z();\n\t\t\tworldreport[ offset + 7 ] = rotation.w();\n\t\t\t\n\t\t\t_vector = object.getLinearVelocity();\n\t\t\tworldreport[ offset + 8 ] = _vector.x();\n\t\t\tworldreport[ offset + 9 ] = _vector.y();\n\t\t\tworldreport[ offset + 10 ] = _vector.z();\n\t\t\t\n\t\t\t_vector = object.getAngularVelocity();\n\t\t\tworldreport[ offset + 11 ] = _vector.x();\n\t\t\tworldreport[ offset + 12 ] = _vector.y();\n\t\t\tworldreport[ offset + 13 ] = _vector.z()\n\t\t}\n\t}\n\t\n\ttransferableMessage( worldreport, [worldreport.buffer] );\n};\n\nreportCollisions = function() {\n\tvar i, offset,\n\t\tdp = world.getDispatcher(),\n\t\tnum = dp.getNumManifolds(),\n\t\tmanifold, num_contacts, j, pt,\n\t\t_collided = false;\n\t\n\tif ( collisionreport.length < 2 + num * COLLISIONREPORT_ITEMSIZE ) {\n\t\tcollisionreport = new Float32Array(\n\t\t\t2 + // message id & # objects in report\n\t\t\t( Math.ceil( _num_objects / REPORT_CHUNKSIZE ) * REPORT_CHUNKSIZE ) * COLLISIONREPORT_ITEMSIZE // # of values needed * item size\n\t\t);\n\t\tcollisionreport[0] = MESSAGE_TYPES.COLLISIONREPORT;\n\t}\n\t\n\tcollisionreport[1] = 0; // how many collisions we're reporting on\n\t\n\tfor ( i = 0; i < num; i++ ) {\n\t\tmanifold = dp.getManifoldByIndexInternal( i );\n\t\t\n\t\tnum_contacts = manifold.getNumContacts();\n\t\tif ( num_contacts == 0 ) continue;\n\t\t\n\t\tfor ( j = 0; j < num_contacts; j++ ) {\n\t\t\tpt = manifold.getContactPoint( j );\n\t\t\t//if ( pt.getDistance() < 0 ) {\n\t\t\t\toffset = 2 + (collisionreport[1]++) * COLLISIONREPORT_ITEMSIZE;\n\t\t\t\tcollisionreport[ offset ] = _objects_ammo[ manifold.getBody0() ];\n\t\t\t\tcollisionreport[ offset + 1 ] = _objects_ammo[ manifold.getBody1() ];\n\t\t\t\tbreak;\n\t\t\t//}\n\t\t}\n\t}\n\t\n\ttransferableMessage( collisionreport, [collisionreport.buffer] );\n};\n\nself.onmessage = function( event ) {\n\t\n\tif ( event.data instanceof Float32Array ) {\n\t\t// transferable object\n\t\t\n\t\tswitch ( event.data[0] ) {\n\t\t\tcase MESSAGE_TYPES.WORLDREPORT:\n\t\t\t\tworldreport = event.data;\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase MESSAGE_TYPES.COLLISIONREPORT:\n\t\t\t\tcollisionreport = event.data;\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif ( event.data.cmd && public_functions[event.data.cmd] ) {\n\t\t//if ( event.data.params.id !== undefined && _objects[event.data.params.id] === undefined && event.data.cmd !== 'addObject' && event.data.cmd !== 'registerMaterial' ) return;\n\t\tpublic_functions[event.data.cmd]( event.data.params );\n\t}\n\t\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":26809}]],"length":26809,"saved":false}
