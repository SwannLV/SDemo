{"ts":1351831276621,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.EffectComposer = function ( renderer, renderTarget ) {\r\n\r\n    this.renderer = renderer;\r\n\r\n\tthis.renderTarget1 = renderTarget;\r\n\r\n\tif ( this.renderTarget1 === undefined ) {\r\n\r\n\t\tvar width = window.innerWidth || 1;\r\n\t\tvar height = window.innerHeight || 1;\r\n\r\n\t\tthis.renderTargetParameters = { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter, format: THREE.RGBFormat, stencilBuffer: false };\r\n\t\tthis.renderTarget1 = new THREE.WebGLRenderTarget( width, height, this.renderTargetParameters );\r\n\r\n\t}\r\n\r\n\tthis.renderTarget2 = this.renderTarget1.clone();\r\n\r\n\tthis.writeBuffer = this.renderTarget1;\r\n\tthis.readBuffer = this.renderTarget2;\r\n\r\n\tthis.passes = [];\r\n\r\n\tif ( THREE.CopyShader === undefined )\r\n\t\tconsole.error( \"THREE.EffectComposer relies on THREE.CopyShader\" );\r\n\r\n\tthis.copyPass = new THREE.ShaderPass( THREE.CopyShader );\r\n\r\n};\r\n\r\nTHREE.EffectComposer.prototype = {\r\n\r\n\tswapBuffers: function() {\r\n\r\n\t\tvar tmp = this.readBuffer;\r\n\t\tthis.readBuffer = this.writeBuffer;\r\n\t\tthis.writeBuffer = tmp;\r\n\r\n\t},\r\n\r\n\taddPass: function ( pass ) {\r\n\r\n\t\tthis.passes.push( pass );\r\n\r\n\t},\r\n\r\n\trender: function ( delta ) {\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t\tvar maskActive = false;\r\n\r\n\t\tvar pass, i, il = this.passes.length;\r\n\r\n\t\tfor ( i = 0; i < il; i ++ ) {\r\n\r\n\t\t\tpass = this.passes[ i ];\r\n\r\n\t\t\tif ( !pass.enabled ) continue;\r\n\r\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\r\n\r\n\t\t\tif ( pass.needsSwap ) {\r\n\r\n\t\t\t\tif ( maskActive ) {\r\n\r\n\t\t\t\t\tvar context = this.renderer.context;\r\n\r\n\t\t\t\t\tcontext.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, delta );\r\n\r\n\t\t\t\t\tcontext.stencilFunc( context.EQUAL, 1, 0xffffffff );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.swapBuffers();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pass instanceof THREE.MaskPass ) {\r\n\r\n\t\t\t\tmaskActive = true;\r\n\r\n\t\t\t} else if ( pass instanceof THREE.ClearMaskPass ) {\r\n\r\n\t\t\t\tmaskActive = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\treset: function ( renderTarget ) {\r\n\r\n\t\tthis.renderTarget1 = renderTarget;\r\n\r\n\t\tif ( this.renderTarget1 === undefined ) {\r\n\r\n\t\t\tthis.renderTarget1 = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight, this.renderTargetParameters );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderTarget2 = this.renderTarget1.clone();\r\n\r\n\t\tthis.writeBuffer = this.renderTarget1;\r\n\t\tthis.readBuffer = this.renderTarget2;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// shared ortho camera\r\n\r\nTHREE.EffectComposer.camera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );\r\n\r\nTHREE.EffectComposer.quad = new THREE.Mesh( new THREE.PlaneGeometry( 2, 2 ), null );\r\n\r\nTHREE.EffectComposer.scene = new THREE.Scene();\r\nTHREE.EffectComposer.scene.add( THREE.EffectComposer.quad );\r\n"]],"start1":0,"start2":0,"length1":0,"length2":2803}]],"length":2803}
