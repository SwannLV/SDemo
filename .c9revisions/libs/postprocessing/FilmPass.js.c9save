{"ts":1351831721411,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1351831737604,"patch":[[{"diffs":[[1,"/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.FilmPass = function ( noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale ) {\r\n\r\n    if ( THREE.FilmShader === undefined )\r\n\t\tconsole.error( \"THREE.FilmPass relies on THREE.FilmShader\" );\r\n\r\n\tvar shader = THREE.FilmShader;\r\n\r\n\tthis.uniforms = THREE.UniformsUtils.clone( shader.uniforms );\r\n\r\n\tthis.material = new THREE.ShaderMaterial( {\r\n\r\n\t\tuniforms: this.uniforms,\r\n\t\tvertexShader: shader.vertexShader,\r\n\t\tfragmentShader: shader.fragmentShader\r\n\r\n\t} );\r\n\r\n\tif ( grayscale !== undefined )\tthis.uniforms.grayscale.value = grayscale;\r\n\tif ( noiseIntensity !== undefined ) this.uniforms.nIntensity.value = noiseIntensity;\r\n\tif ( scanlinesIntensity !== undefined ) this.uniforms.sIntensity.value = scanlinesIntensity;\r\n\tif ( scanlinesCount !== undefined ) this.uniforms.sCount.value = scanlinesCount;\r\n\r\n\tthis.enabled = true;\r\n\tthis.renderToScreen = false;\r\n\tthis.needsSwap = true;\r\n\r\n};\r\n\r\nTHREE.FilmPass.prototype = {\r\n\r\n\trender: function ( renderer, writeBuffer, readBuffer, delta ) {\r\n\r\n\t\tthis.uniforms[ \"tDiffuse\" ].value = readBuffer;\r\n\t\tthis.uniforms[ \"time\" ].value += delta;\r\n\r\n\t\tTHREE.EffectComposer.quad.material = this.material;\r\n\r\n\t\tif ( this.renderToScreen ) {\r\n\r\n\t\t\trenderer.render( THREE.EffectComposer.scene, THREE.EffectComposer.camera );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.render( THREE.EffectComposer.scene, THREE.EffectComposer.camera, writeBuffer, false );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":1465}]],"length":1465,"saved":false}
